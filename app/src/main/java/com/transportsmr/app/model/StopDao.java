package com.transportsmr.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STOP".
*/
public class StopDao extends AbstractDao<Stop, Long> {

    public static final String TABLENAME = "STOP";

    /**
     * Properties of entity Stop.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ks_id = new Property(1, String.class, "ks_id", false, "KS_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Title_lc = new Property(3, String.class, "title_lc", false, "TITLE_LC");
        public final static Property AdjacentStreet = new Property(4, String.class, "adjacentStreet", false, "ADJACENT_STREET");
        public final static Property AdjacentStreet_lc = new Property(5, String.class, "adjacentStreet_lc", false, "ADJACENT_STREET_LC");
        public final static Property Direction = new Property(6, String.class, "direction", false, "DIRECTION");
        public final static Property Cluster = new Property(7, String.class, "cluster", false, "CLUSTER");
        public final static Property BusesMunicipal = new Property(8, String.class, "busesMunicipal", false, "BUSES_MUNICIPAL");
        public final static Property BusesCommercial = new Property(9, String.class, "busesCommercial", false, "BUSES_COMMERCIAL");
        public final static Property BusesPrigorod = new Property(10, String.class, "busesPrigorod", false, "BUSES_PRIGOROD");
        public final static Property BusesSeason = new Property(11, String.class, "busesSeason", false, "BUSES_SEASON");
        public final static Property BusesSpecial = new Property(12, String.class, "busesSpecial", false, "BUSES_SPECIAL");
        public final static Property Trams = new Property(13, String.class, "trams", false, "TRAMS");
        public final static Property Trolleybuses = new Property(14, String.class, "trolleybuses", false, "TROLLEYBUSES");
        public final static Property Metros = new Property(15, String.class, "metros", false, "METROS");
        public final static Property InfotabloExists = new Property(16, String.class, "infotabloExists", false, "INFOTABLO_EXISTS");
        public final static Property Latitude = new Property(17, Float.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(18, Float.class, "longitude", false, "LONGITUDE");
        public final static Property Favorite = new Property(19, Boolean.class, "favorite", false, "FAVORITE");
    }


    public StopDao(DaoConfig config) {
        super(config);
    }
    
    public StopDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STOP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"KS_ID\" TEXT," + // 1: ks_id
                "\"TITLE\" TEXT," + // 2: title
                "\"TITLE_LC\" TEXT," + // 3: title_lc
                "\"ADJACENT_STREET\" TEXT," + // 4: adjacentStreet
                "\"ADJACENT_STREET_LC\" TEXT," + // 5: adjacentStreet_lc
                "\"DIRECTION\" TEXT," + // 6: direction
                "\"CLUSTER\" TEXT," + // 7: cluster
                "\"BUSES_MUNICIPAL\" TEXT," + // 8: busesMunicipal
                "\"BUSES_COMMERCIAL\" TEXT," + // 9: busesCommercial
                "\"BUSES_PRIGOROD\" TEXT," + // 10: busesPrigorod
                "\"BUSES_SEASON\" TEXT," + // 11: busesSeason
                "\"BUSES_SPECIAL\" TEXT," + // 12: busesSpecial
                "\"TRAMS\" TEXT," + // 13: trams
                "\"TROLLEYBUSES\" TEXT," + // 14: trolleybuses
                "\"METROS\" TEXT," + // 15: metros
                "\"INFOTABLO_EXISTS\" TEXT," + // 16: infotabloExists
                "\"LATITUDE\" REAL," + // 17: latitude
                "\"LONGITUDE\" REAL," + // 18: longitude
                "\"FAVORITE\" INTEGER);"); // 19: favorite
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STOP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Stop entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ks_id = entity.getKs_id();
        if (ks_id != null) {
            stmt.bindString(2, ks_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String title_lc = entity.getTitle_lc();
        if (title_lc != null) {
            stmt.bindString(4, title_lc);
        }
 
        String adjacentStreet = entity.getAdjacentStreet();
        if (adjacentStreet != null) {
            stmt.bindString(5, adjacentStreet);
        }
 
        String adjacentStreet_lc = entity.getAdjacentStreet_lc();
        if (adjacentStreet_lc != null) {
            stmt.bindString(6, adjacentStreet_lc);
        }
 
        String direction = entity.getDirection();
        if (direction != null) {
            stmt.bindString(7, direction);
        }
 
        String cluster = entity.getCluster();
        if (cluster != null) {
            stmt.bindString(8, cluster);
        }
 
        String busesMunicipal = entity.getBusesMunicipal();
        if (busesMunicipal != null) {
            stmt.bindString(9, busesMunicipal);
        }
 
        String busesCommercial = entity.getBusesCommercial();
        if (busesCommercial != null) {
            stmt.bindString(10, busesCommercial);
        }
 
        String busesPrigorod = entity.getBusesPrigorod();
        if (busesPrigorod != null) {
            stmt.bindString(11, busesPrigorod);
        }
 
        String busesSeason = entity.getBusesSeason();
        if (busesSeason != null) {
            stmt.bindString(12, busesSeason);
        }
 
        String busesSpecial = entity.getBusesSpecial();
        if (busesSpecial != null) {
            stmt.bindString(13, busesSpecial);
        }
 
        String trams = entity.getTrams();
        if (trams != null) {
            stmt.bindString(14, trams);
        }
 
        String trolleybuses = entity.getTrolleybuses();
        if (trolleybuses != null) {
            stmt.bindString(15, trolleybuses);
        }
 
        String metros = entity.getMetros();
        if (metros != null) {
            stmt.bindString(16, metros);
        }
 
        String infotabloExists = entity.getInfotabloExists();
        if (infotabloExists != null) {
            stmt.bindString(17, infotabloExists);
        }
 
        Float latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(18, latitude);
        }
 
        Float longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(19, longitude);
        }
 
        Boolean favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindLong(20, favorite ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Stop entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ks_id = entity.getKs_id();
        if (ks_id != null) {
            stmt.bindString(2, ks_id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String title_lc = entity.getTitle_lc();
        if (title_lc != null) {
            stmt.bindString(4, title_lc);
        }
 
        String adjacentStreet = entity.getAdjacentStreet();
        if (adjacentStreet != null) {
            stmt.bindString(5, adjacentStreet);
        }
 
        String adjacentStreet_lc = entity.getAdjacentStreet_lc();
        if (adjacentStreet_lc != null) {
            stmt.bindString(6, adjacentStreet_lc);
        }
 
        String direction = entity.getDirection();
        if (direction != null) {
            stmt.bindString(7, direction);
        }
 
        String cluster = entity.getCluster();
        if (cluster != null) {
            stmt.bindString(8, cluster);
        }
 
        String busesMunicipal = entity.getBusesMunicipal();
        if (busesMunicipal != null) {
            stmt.bindString(9, busesMunicipal);
        }
 
        String busesCommercial = entity.getBusesCommercial();
        if (busesCommercial != null) {
            stmt.bindString(10, busesCommercial);
        }
 
        String busesPrigorod = entity.getBusesPrigorod();
        if (busesPrigorod != null) {
            stmt.bindString(11, busesPrigorod);
        }
 
        String busesSeason = entity.getBusesSeason();
        if (busesSeason != null) {
            stmt.bindString(12, busesSeason);
        }
 
        String busesSpecial = entity.getBusesSpecial();
        if (busesSpecial != null) {
            stmt.bindString(13, busesSpecial);
        }
 
        String trams = entity.getTrams();
        if (trams != null) {
            stmt.bindString(14, trams);
        }
 
        String trolleybuses = entity.getTrolleybuses();
        if (trolleybuses != null) {
            stmt.bindString(15, trolleybuses);
        }
 
        String metros = entity.getMetros();
        if (metros != null) {
            stmt.bindString(16, metros);
        }
 
        String infotabloExists = entity.getInfotabloExists();
        if (infotabloExists != null) {
            stmt.bindString(17, infotabloExists);
        }
 
        Float latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(18, latitude);
        }
 
        Float longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(19, longitude);
        }
 
        Boolean favorite = entity.getFavorite();
        if (favorite != null) {
            stmt.bindLong(20, favorite ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Stop readEntity(Cursor cursor, int offset) {
        Stop entity = new Stop( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ks_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title_lc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // adjacentStreet
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // adjacentStreet_lc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // direction
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // cluster
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // busesMunicipal
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // busesCommercial
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // busesPrigorod
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // busesSeason
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // busesSpecial
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // trams
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // trolleybuses
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // metros
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // infotabloExists
            cursor.isNull(offset + 17) ? null : cursor.getFloat(offset + 17), // latitude
            cursor.isNull(offset + 18) ? null : cursor.getFloat(offset + 18), // longitude
            cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0 // favorite
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Stop entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKs_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle_lc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAdjacentStreet(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAdjacentStreet_lc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDirection(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCluster(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBusesMunicipal(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBusesCommercial(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBusesPrigorod(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBusesSeason(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBusesSpecial(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTrams(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTrolleybuses(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMetros(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setInfotabloExists(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setLatitude(cursor.isNull(offset + 17) ? null : cursor.getFloat(offset + 17));
        entity.setLongitude(cursor.isNull(offset + 18) ? null : cursor.getFloat(offset + 18));
        entity.setFavorite(cursor.isNull(offset + 19) ? null : cursor.getShort(offset + 19) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Stop entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Stop entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Stop entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
