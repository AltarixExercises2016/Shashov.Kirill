package com.transportsmr.app.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROUTE".
*/
public class RouteDao extends AbstractDao<Route, Long> {

    public static final String TABLENAME = "ROUTE";

    /**
     * Properties of entity Route.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Kr_id = new Property(1, String.class, "kr_id", false, "KR_ID");
        public final static Property Number = new Property(2, String.class, "number", false, "NUMBER");
        public final static Property TransportType = new Property(3, String.class, "transportType", false, "TRANSPORT_TYPE");
        public final static Property AffiliationID = new Property(4, String.class, "affiliationID", false, "AFFILIATION_ID");
        public final static Property Affiliation = new Property(5, String.class, "affiliation", false, "AFFILIATION");
    }


    public RouteDao(DaoConfig config) {
        super(config);
    }
    
    public RouteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROUTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"KR_ID\" TEXT," + // 1: kr_id
                "\"NUMBER\" TEXT," + // 2: number
                "\"TRANSPORT_TYPE\" TEXT," + // 3: transportType
                "\"AFFILIATION_ID\" TEXT," + // 4: affiliationID
                "\"AFFILIATION\" TEXT);"); // 5: affiliation
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROUTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Route entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String kr_id = entity.getKr_id();
        if (kr_id != null) {
            stmt.bindString(2, kr_id);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(3, number);
        }
 
        String transportType = entity.getTransportType();
        if (transportType != null) {
            stmt.bindString(4, transportType);
        }
 
        String affiliationID = entity.getAffiliationID();
        if (affiliationID != null) {
            stmt.bindString(5, affiliationID);
        }
 
        String affiliation = entity.getAffiliation();
        if (affiliation != null) {
            stmt.bindString(6, affiliation);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Route entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String kr_id = entity.getKr_id();
        if (kr_id != null) {
            stmt.bindString(2, kr_id);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(3, number);
        }
 
        String transportType = entity.getTransportType();
        if (transportType != null) {
            stmt.bindString(4, transportType);
        }
 
        String affiliationID = entity.getAffiliationID();
        if (affiliationID != null) {
            stmt.bindString(5, affiliationID);
        }
 
        String affiliation = entity.getAffiliation();
        if (affiliation != null) {
            stmt.bindString(6, affiliation);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Route readEntity(Cursor cursor, int offset) {
        Route entity = new Route( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // kr_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // number
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // transportType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // affiliationID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // affiliation
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Route entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKr_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTransportType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAffiliationID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAffiliation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Route entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Route entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Route entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
